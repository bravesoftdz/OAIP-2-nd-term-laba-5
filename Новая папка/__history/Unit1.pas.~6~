unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Imaging.pngimage,
  Vcl.ExtCtrls;

const
  MIN = 1;
  MAX = 2;
  WOMAN_FILE = 'woman.myext';
  MAN_FILE = 'man.myext';

type
  TMyCountType = byte;
  //тип массив, хранящий данные о желаемых минимальных и максимальных параметрах партнёра
  TDiapason = array [MIN..MAX] of TMyCountType;
  TName = string[50];

  //тип запись, хранит данные о клиенте
  TClient = record
    name : TName;                                 //имя
    age : TMyCountType;                           //возраст
    weight : TMyCountType;                        //вес
    height : TMyCountType;                        //рост
    partnerAge : TDiapason;                       //диапазон возраста партнёра
    partnerWeight : TDiapason;                    //диапазон веса партнёра
    partnerHeight : TDiapason;                    //диапазон ромта парнёра
  end;

  //указатель на список клиентов
  PTClientList = ^TClientList;
  TClientList = record
    data : ^TClient;                              //данные о клиенте
    next : PTClientList;                          //указател на следующего клиента
  end;

  TForm1 = class(TForm)
    WomanListBox: TListBox;
    ManListBox: TListBox;
    ManAgreeButton: TButton;
    WomanAgreeButton: TButton;
    ManAddButton: TButton;
    ManChangeButton: TButton;
    ManDeleteButton: TButton;
    WomanAddButton: TButton;
    WomanChangeButton: TButton;
    WomanDeleteButton: TButton;
    CloseImage: TImage;
    RefreshImage: TImage;
    procedure CloseImageClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure CreateManList;
    procedure CreateWomanList;
    procedure ManAddButtonClick(Sender: TObject);
    procedure RefreshImageClick(Sender: TObject);
    procedure WomanAddButtonClick(Sender: TObject);
    procedure ManChangeButtonClick(Sender: TObject);
    procedure WomanChangeButtonClick(Sender: TObject);
  private

  public
    manList, womanList : PTClientList;
  end;


var
  Form1: TForm1;

procedure CreateList(var list : PTClientList; const fileName : string);

implementation

{$R *.dfm}

uses
  Unit3;

{
//функция сравнения по имени
//возвращает 1, если имя1 > имени2
//возвращает 0, если имя1 = имени2
//возвращает -1, если имя1 < имени2
function CompareByName(Item1 : Pointer; Item2 : Pointer) : integer;
var
  client1, client2 : TClient;
begin
  Result := 0;
  client1 := TClient(Item1);
  client2 := TClient(Item2);
  if client1.name > client2.name then inc(Result)
  else if client1.name < client1.name then dec(Result);
end;

//функция сравнения по возрасту
//возвращает 1, если возраст1 > возраста2
//возвращает 0, если возраст1 = возрасту2
//возвращает -1, если возраст1 < возраста2
function CompareByAge(Item1 : Pointer; Item2 : Pointer) : integer;
var
  client1, client2 : TClient;
begin
  Result := 0;
  client1 := TClient(Item1);
  client2 := TClient(Item2);
  if client1.age > client2.age then inc(Result)
  else if client1.age < client1.age then dec(Result);
end;

//функция сравнения по весу
//возвращает 1, если вес1 > веса2
//возвращает 0, если вес1 = весу2
//возвращает -1, если веса1 < веса2
function CompareByWeight(Item1 : Pointer; Item2 : Pointer) : integer;
var
  client1, client2 : TClient;
begin
  Result := 0;
  client1 := TClient(Item1);
  client2 := TClient(Item2);
  if client1.weight > client2.weight then inc(Result)
  else if client1.weight < client1.weight then dec(Result);
end;

//функция сравнения по росту
//возвращает 1, если рост1 > роста2
//возвращает 0, если рост1 = росту2
//возвращает -1, если рост1 < роста2
function CompareByHeight(Item1 : Pointer; Item2 : Pointer) : integer;
var
  client1, client2 : TClient;
begin
  Result := 0;
  client1 := TClient(Item1);
  client2 := TClient(Item2);
  if client1.height > client2.height then inc(Result)
  else if client1.height < client1.height then dec(Result);
end;

//функция проверяет, входит ли передаваемое значение в диапазон
//возвращает TRUE, если входит, FALSE, если нет
function ParameterInDiapason(param : TMyCountType; var diapason : TDiapason) : boolean;
begin
  Result := (param >= diapason[MIN]) and (param <= diapason[MAX]);
end;           }

//процедура создания списка мужчин
procedure TForm1.CreateManList;
begin
  CreateList(manList, MAN_FILE);
end;

//процедура создания списка женщин
procedure TForm1.CreateWomanList;
begin
  CreateList(womanList, WOMAN_FILE);
end;

//процедура чтения данных из файла filename в односвязный список list
procedure CreateList(var list : PTClientList; const fileName : string);
var
  F : file of TClient;
  pnt : PTClientList;
begin
  AssignFile(F, fileName);               //связываем файловую переменную с файлом
  new(list);                             //создаём первый элемент списка
  list.next := nil;
  pnt := list;
  if FileExists(fileName) then           //проверяем существование файла
  try
    Reset(F);
    while not EOF(F) do
    begin
      new(pnt^.next);                    //создаём звено односвязного списка
      pnt := pnt^.next;
      new(pnt.data);
      Read(F, pnt.data^);                //читаем в него из фала
      pnt^.next := nil;
    end;
  finally
    CloseFile(F);                        //закрываем файл
  end;
end;

//процедура записи данных в файл
procedure SaveData(var list : PTClientList; const fileName : string);
var
  F : file of TClient;
begin
  AssignFile(F, fileName);               //связываем файлову переменную с файлом
  try
    Rewrite(F);                          //открываем файл на перезапись
    list := list^.next;
    while list <> nil do
    begin
      Write(F, list^.data^);             //пишем в файл данные из списка
      list := list^.next;
    end;
  finally
    CloseFile(F);                        //закрываем файл
  end;
end;

//событие по закрытию приложения
procedure TForm1.CloseImageClick(Sender: TObject);
begin
  SaveData(manList, MAN_FILE);           //сохраняем данные
  SaveData(WomanList, WOMAN_FILE);
  Close;                                 //закрываем приложение
end;

//создание исходных списков по запуску приложения
procedure TForm1.FormActivate(Sender: TObject);
begin
  if manList = nil then Form1.CreateManList;
  if womanList = nil then Form1.CreateWomanList;
end;

//функция возвращает текущую длину списка
function GetListSize(list : PTClientList) : integer;
begin
  Result := 0;
  while list^.next <> nil do
  begin
    inc(Result);
    list := list^.next;
  end;
end;

//процедура вывода данных в ListBox-ы
procedure TForm1.RefreshImageClick(Sender: TObject);
var
  pnt : PTClientList;
begin
  Form1.ManListBox.Clear;
  Form1.ManListBox.Font.Color := clBlack;
  Form1.WomanListBox.Clear;
  Form1.WomanListBox.Font.Color := clBlack;
  pnt := manList^.next;
  while pnt <> nil do               //вывод данных о мужчинах
  begin
    Form1.ManListBox.Items.Add(pnt.data^.name + ', ' + intToStr(pnt.data^.age) + ', ' +
                               intToStr(pnt.data^.weight) + ', ' + intToStr(pnt^.data^.height));
    pnt := pnt^.next;
  end;

  pnt := womanList^.next;
  while pnt <> nil do               //вывод данных о женщинах
  begin
    Form1.WomanListBox.Items.Add(pnt.data^.name + ', ' + intToStr(pnt.data^.age) + ', ' +
                                 intToStr(pnt.data^.weight) + ', ' + intToStr(pnt^.data^.height));
    pnt := pnt^.next;
  end;
end;

//событие по нажатию мыши, вызывает процедуру добавлния нового элемента в список женщин
procedure TForm1.WomanAddButtonClick(Sender: TObject);
begin
  Unit3.AddClient(womanList);
end;

//событие по нажатию мыши, вызывает процедуру добавлния нового элемента в список мужчин
procedure TForm1.ManAddButtonClick(Sender: TObject);
begin
  Unit3.AddClient(manList);
end;

procedure TForm1.WomanChangeButtonClick(Sender: TObject);
begin
  if Form1.WomanListBox.Focused then
    Unit3.ChangeClientInfo(womanList, Form1.WomanListBox.ItemIndex);
end;

procedure TForm1.ManChangeButtonClick(Sender: TObject);
begin
  if Form1.WomanListBox.Focused then
    Unit3.ChangeClientInfo(manList, Form1.ManListBox.ItemIndex);
end;

end.


